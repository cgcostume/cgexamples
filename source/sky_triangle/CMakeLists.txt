
# 
# External dependencies
# 

find_package(glm REQUIRED)
find_package(glfw3)
find_package(glbinding REQUIRED)


# 
# Executable name and options
# 

# Target name
set(target sky_triangle)

# Exit here if required dependencies are not met
if (NOT glfw3_FOUND)
    message("${target} skipped: GLFW not found")
    return()
endif()

message(STATUS "${target}")


# 
# Sources
# 

set(data "${CMAKE_SOURCE_DIR}/data/${target}")

set(sources
    main.cpp

    scene.cpp
    scene.h
    cursor.cpp
    cursor.h
    skytriangle.cpp
    skytriangle.h
    skybox.cpp
    skybox.h
    cube.cpp
    cube.h
    ${data}/skybox.vert
    ${data}/skybox.frag
    ${data}/skyboxTex.frag
    ${data}/cube.vert
    ${data}/cube.geom
    ${data}/cube.frag
    ${data}/skytriangle.frag
    ${data}/skytriangle.vert
    ${data}/difference.vert
    ${data}/difference.frag
)


# 
# Create executable
# 

# Build executable
add_executable(${target}
    ${sources}
)

# Create namespaced alias
add_executable(${META_PROJECT_NAME}::${target} ALIAS ${target})


# 
# Project options
# 

set_target_properties(${target}
    PROPERTIES
    ${DEFAULT_PROJECT_OPTIONS}
    FOLDER "${IDE_FOLDER}"
)


# 
# Include directories
# 

target_include_directories(${target}
    PRIVATE
    ${DEFAULT_INCLUDE_DIRECTORIES}
    ${PROJECT_BINARY_DIR}/source/include
    SYSTEM
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
)


# 
# Libraries
# 

target_link_libraries(${target}
    PRIVATE
    ${DEFAULT_LIBRARIES}
    glfw
    ${META_PROJECT_NAME}::cgutils
    glbinding::glbinding
)


# 
# Compile definitions
# 

target_compile_definitions(${target}
    PRIVATE
    ${DEFAULT_COMPILE_DEFINITIONS}
    PUBLIC
    GLFW_INCLUDE_NONE
    GLM_FORCE_RADIANS
)


# 
# Compile options
# 

target_compile_options(${target}
    PRIVATE
    ${DEFAULT_COMPILE_OPTIONS}
)


# 
# Linker options
# 

target_link_libraries(${target}
    PRIVATE
    ${DEFAULT_LINKER_OPTIONS}
)


# 
# Deployment
# 

# Executable
install(TARGETS ${target}
    RUNTIME DESTINATION ${INSTALL_BIN} COMPONENT examples
    BUNDLE  DESTINATION ${INSTALL_BIN} COMPONENT examples
)
